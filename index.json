[{"content":" ","date":"2025-09-29","externalUrl":null,"permalink":"/","section":"欢迎来到 Blowfish ！","summary":"","title":"欢迎来到 Blowfish ！","type":"page"},{"content":"","date":"2025-09-29","externalUrl":null,"permalink":"/posts/","section":"文章","summary":"","title":"文章","type":"posts"},{"content":"","date":"2025-09-27","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"2025-09-27","externalUrl":null,"permalink":"/tags/git/","section":"Tags","summary":"","title":"Git","type":"tags"},{"content":"","date":"27 September 2025","externalUrl":null,"permalink":"/en/series/git-documents/","section":"Series","summary":"","title":"Git Documents","type":"series"},{"content":" 在往github上push项目的时候，如果走https的方式，每次都需要输入账号密码，非常麻烦。而采用ssh的方式，就不再需要输入，只需要在github自己账号下配置一个ssh key即可。\n一、检查本地主机是否已经存在ssh key # win + R打开运行 ，输入cmd打开命令行\n输入以下命令\ncd .ssh dir 如果存在id_rsa 和 id_rsa.pub文件，如果存在，说明已经有SSH Key。下图即表示存在。\n如果存在，则直接执行第三步。\n二、生成ssh key # 如果不存在，使用下列命令生成。\nssh-keygen -t rsa -C \u0026#34;xxx@xxx.com\u0026#34; // 将 \u0026#34;xxx@xxx.com\u0026#34; 替换为你自己GitHub的邮箱地址 一直回车即可。\n三、获取ssh key公钥内容（id_rsa.pub） # cd .ssh type id_rsa.pub // Windows命令行 cat id_rsa.pub // Linux命令行 如下图所示，复制这段内容\n四、Github账号上添加公钥 # 1、点击右上角的头像，进入settings设置，添加SSH Keys。\n2、将刚刚复制的内容添加上去\n五、验证是否设置成功 # ssh -T git@github.com 显示如下则表示设置成功\n设置成功后，即可不需要账号密码clone和push代码\n注意之后在clone仓库的时候要使用ssh的url，而不是https！\n","date":"2025-09-27","externalUrl":null,"permalink":"/posts/git/gitssh/","section":"文章","summary":"使用Windows如何配置SSH连接Github","title":"GitHub SSH配置","type":"posts"},{"content":"","date":"2025-09-27","externalUrl":null,"permalink":"/series/git%E6%95%99%E7%A8%8B/","section":"Series","summary":"","title":"Git教程","type":"series"},{"content":"","date":"2025-09-27","externalUrl":null,"permalink":"/authors/muzimu/","section":"Authors","summary":"","title":"Muzimu","type":"authors"},{"content":"","date":"2025-09-27","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"2025-09-27","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2025-09-27","externalUrl":null,"permalink":"/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","section":"Tags","summary":"","title":"环境配置","type":"tags"},{"content":" 基本介绍 # 在使用Git进行代码仓库管理的时候，我们不可避免需要提交Commit，即每次提交代码需要标注本次进行了哪些修改，方便让合作者快速阅览了解开发内容，提高合作效率。目前Angular规范是最广泛的Git Commit规范方法，本文参考下列文档，使用中文编写新手友好的实用教程。 Augular Github规范 参考博客\n规范内容 # Commit信息格式 # \u0026lt;type\u0026gt;(\u0026lt;scope\u0026gt;): \u0026lt;subject\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;body\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;footer\u0026gt; 其中type(提交类型)和subject(简短描述)是必须项，scope(影响范围)是可选项 第一行为Header(标题)，第二部分为Body(正文)，最后部分为Footer(脚注) 一般实际开发中主要遵循标题规范，即 type(scope): subject，示例如下\nfeat(第二课堂): 显示第二课堂学分 fix(第二课堂): 修复第二课堂学分显示问题 docs: Readme中增加新人环境配置教程 test: 教务系统API单元测试 Type (提交类型) # 常用的Type类型如下：\nfeat: 新功能 fix: 修复 bug docs: 文档修改 style: 不影响代码逻辑的格式调整 refactor: 既不是新功能也不是修复 bug 的代码重构 perf: 性能优化 test: 添加或修改测试代码 chore: 构建过程或辅助工具的变动 Scope (影响范围) # 指定提交影响的模块或文件范围，例如：\n第二课堂 教务系统 Subject (简短描述) # 建议使用中文 简单描述修改内容，使用陈述句，例如\u0026quot;修复了xx问题\u0026quot; 结尾不要使用句号或者其他标点符号 规范Git Commit工具 # 使用VSCode的用户可以安装git-commit-plugin插件，使用效果如下： ","date":"2025-09-24","externalUrl":null,"permalink":"/posts/git/gitcommit/","section":"文章","summary":"介绍最广泛的Angular Git Commit提交规范","title":"Git Commit规范","type":"posts"},{"content":"","date":"2025-09-24","externalUrl":null,"permalink":"/tags/%E6%8A%80%E6%9C%AF%E8%A7%84%E8%8C%83/","section":"Tags","summary":"","title":"技术规范","type":"tags"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":" 我的QQ # 2404580981\n我的微信 # ","externalUrl":null,"permalink":"/users/","section":"欢迎来到 Blowfish ！","summary":"","title":"关于我","type":"page"}]