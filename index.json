[{"content":"","date":"2025-10-13","externalUrl":null,"permalink":"/tags/acm/","section":"Tags","summary":"","title":"ACM","type":"tags"},{"content":" ACM输入输出模板 # 很多朋友在求职的笔试和面试中，因为对ACM模式的输入输出不熟悉，导致无法完成算法题。输入输出是写算法题的基础，大家可以根据自己的首选语言进行\u0026quot;背诵\u0026quot;。\n下面，针对常见的ACM输入与输出，给大家总结了模板写法，包括了C++、Python、Go、Java、JavaScript等主流编程语言。示例代码均为“A+B”问题，题目描述为输入A和B两个数，要求输出A+B。\n1.多组数据，每组第一行为n，之后输入n行两个整数 # 练习题：A+B问题I\n输入：第一行是一个整数N，表示后面会有N行a和b，通过空格隔开。\nC++ # #include\u0026lt;iostream\u0026gt; using namespace std; int main() { int n, a, b; while (cin \u0026gt;\u0026gt; n) { while (n--) { cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; cout \u0026lt;\u0026lt; a + b \u0026lt;\u0026lt; endl; } } } Python # n = int(input()) for _ in range(n): a, b = map(int, input().split()) print(a + b) Go # package main import \u0026#34;fmt\u0026#34; func main(){ var n, a, b int for { _, err := fmt.Scanf(\u0026#34;%d\u0026#34;, \u0026amp;n) if err != nil { break } for n \u0026gt; 0 { _, err := fmt.Scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;a, \u0026amp;b) if err != nil { break } fmt.Println(a + b) n -- } } } Java # import java.util.Scanner; public class Main { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); while (scanner.hasNext()) { int n = scanner.nextInt(); while (n -- \u0026gt; 0) { int a = scanner.nextInt(); int b = scanner.nextInt(); System.out.println(a + b); } } } } JavaScript # const readline = require(\u0026#39;readline\u0026#39;); const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); let n, count = 0; rl.on(\u0026#39;line\u0026#39;, (input) =\u0026gt; { if (!n) { n = +line; } else { const [a, b] = line.split(\u0026#39; \u0026#39;).map(Number); console.log(a + b)… if (++ count \u0026gt;= n) rl.close(); } }) 1.多行输入，每行两个整数 # 练习题：A+B问题II\n输入：包含一系列的a和b对，通过空格隔开。一对a和b占一行。\nC++ # #include\u0026lt;iostream\u0026gt; using namespace std; int main() { int a, b; while(cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b) cout \u0026lt;\u0026lt; a + b \u0026lt;\u0026lt; endl; } Python # while True: try: a, b = map(int, input().split()) print(a + b) except: break Go # package main import \u0026#34;fmt\u0026#34; func main(){ var a, b int for { _, err := fmt.Scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;a, \u0026amp;b) if err != nil { break } fmt.Println(a + b) } } Java # import java.util.Scanner; public class Main{ public static void main(String[] args){ Scanner in = new Scanner(System.in); while(in.hasNextInt()){ int a = in.nextInt(); int b = in.nextInt(); System.out.println( a + b ); } } } JavaScript # const readline = require(\u0026#39;readline\u0026#39;); const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); rl.on(\u0026#39;line\u0026#39;, (input) =\u0026gt; { const [a, b] = input.split(\u0026#39; \u0026#39;).map(Number); console.log(a + b); }) ","date":"2025-10-13","externalUrl":null,"permalink":"/posts/acm/io/","section":"文章","summary":"","title":"ACM输入输出模板","type":"posts"},{"content":"","date":"13 October 2025","externalUrl":null,"permalink":"/en/tags/programing/","section":"Tags","summary":"","title":"Programing","type":"tags"},{"content":"","date":"2025-10-13","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":" ","date":"2025-10-13","externalUrl":null,"permalink":"/","section":"欢迎来到 Blowfish ！","summary":"","title":"欢迎来到 Blowfish ！","type":"page"},{"content":"","date":"2025-10-13","externalUrl":null,"permalink":"/tags/%E9%9D%A2%E8%AF%95/","section":"Tags","summary":"","title":"面试","type":"tags"},{"content":"","date":"2025-10-13","externalUrl":null,"permalink":"/posts/","section":"文章","summary":"","title":"文章","type":"posts"},{"content":"","date":"2025-09-27","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"2025-09-27","externalUrl":null,"permalink":"/tags/git/","section":"Tags","summary":"","title":"Git","type":"tags"},{"content":"","date":"27 September 2025","externalUrl":null,"permalink":"/en/series/git-documents/","section":"Series","summary":"","title":"Git Documents","type":"series"},{"content":" 使用Windows如何配置SSH连接Github # 在往github上push项目的时候，如果走https的方式，每次都需要输入账号密码，非常麻烦。而采用ssh的方式，就不再需要输入，只需要在github自己账号下配置一个ssh key即可。\n一、检查本地主机是否已经存在ssh key # win + R打开运行 ，输入cmd打开命令行\n输入以下命令\ncd .ssh dir 如果存在id_rsa 和 id_rsa.pub文件，如果存在，说明已经有SSH Key。下图即表示存在。\n如果存在，则直接执行第三步。\n二、生成ssh key # 如果不存在，使用下列命令生成。\nssh-keygen -t rsa -C \u0026#34;xxx@xxx.com\u0026#34; // 将 \u0026#34;xxx@xxx.com\u0026#34; 替换为你自己GitHub的邮箱地址 一直回车即可。\n三、获取ssh key公钥内容（id_rsa.pub） # cd .ssh type id_rsa.pub // Windows命令行 cat id_rsa.pub // Linux命令行 如下图所示，复制这段内容\n四、Github账号上添加公钥 # 1、点击右上角的头像，进入settings设置，添加SSH Keys。\n2、将刚刚复制的内容添加上去\n五、验证是否设置成功 # ssh -T git@github.com 显示如下则表示设置成功\n设置成功后，即可不需要账号密码clone和push代码\n注意之后在clone仓库的时候要使用ssh的url，而不是https！\n","date":"2025-09-27","externalUrl":null,"permalink":"/posts/git/gitssh/","section":"文章","summary":"使用Windows如何配置SSH连接Github","title":"GitHub SSH配置","type":"posts"},{"content":"","date":"2025-09-27","externalUrl":null,"permalink":"/series/git%E6%95%99%E7%A8%8B/","section":"Series","summary":"","title":"Git教程","type":"series"},{"content":"","date":"2025-09-27","externalUrl":null,"permalink":"/authors/muzimu/","section":"Authors","summary":"","title":"Muzimu","type":"authors"},{"content":"","date":"2025-09-27","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"2025-09-27","externalUrl":null,"permalink":"/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","section":"Tags","summary":"","title":"环境配置","type":"tags"},{"content":" 基本介绍 # 在使用Git进行代码仓库管理的时候，我们不可避免需要提交Commit，即每次提交代码需要标注本次进行了哪些修改，方便让合作者快速阅览了解开发内容，提高合作效率。目前Angular规范是最广泛的Git Commit规范方法，本文参考下列文档，使用中文编写新手友好的实用教程。 Augular Github规范 参考博客\n规范内容 # Commit信息格式 # \u0026lt;type\u0026gt;(\u0026lt;scope\u0026gt;): \u0026lt;subject\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;body\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;footer\u0026gt; 其中type(提交类型)和subject(简短描述)是必须项，scope(影响范围)是可选项 第一行为Header(标题)，第二部分为Body(正文)，最后部分为Footer(脚注) 一般实际开发中主要遵循标题规范，即 type(scope): subject，示例如下\nfeat(第二课堂): 显示第二课堂学分 fix(第二课堂): 修复第二课堂学分显示问题 docs: Readme中增加新人环境配置教程 test: 教务系统API单元测试 Type (提交类型) # 常用的Type类型如下：\nfeat: 新功能 fix: 修复 bug docs: 文档修改 style: 不影响代码逻辑的格式调整 refactor: 既不是新功能也不是修复 bug 的代码重构 perf: 性能优化 test: 添加或修改测试代码 chore: 构建过程或辅助工具的变动 Scope (影响范围) # 指定提交影响的模块或文件范围，例如：\n第二课堂 教务系统 Subject (简短描述) # 建议使用中文 简单描述修改内容，使用陈述句，例如\u0026quot;修复了xx问题\u0026quot; 结尾不要使用句号或者其他标点符号 规范Git Commit工具 # 使用VSCode的用户可以安装git-commit-plugin插件，使用效果如下： ","date":"2025-09-24","externalUrl":null,"permalink":"/posts/git/gitcommit/","section":"文章","summary":"介绍最广泛的Angular Git Commit提交规范","title":"Git Commit规范","type":"posts"},{"content":"","date":"2025-09-24","externalUrl":null,"permalink":"/tags/%E6%8A%80%E6%9C%AF%E8%A7%84%E8%8C%83/","section":"Tags","summary":"","title":"技术规范","type":"tags"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":" 我的QQ # 2404580981\n我的微信 # ","externalUrl":null,"permalink":"/users/","section":"欢迎来到 Blowfish ！","summary":"","title":"关于我","type":"page"}]