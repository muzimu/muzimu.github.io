[{"content":"","date":"2025-10-13","externalUrl":null,"permalink":"/tags/acm/","section":"Tags","summary":"","title":"ACM","type":"tags"},{"content":"","date":"2025-10-13","externalUrl":null,"permalink":"/series/acm%E6%95%99%E7%A8%8B/","section":"Series","summary":"","title":"ACM教程","type":"series"},{"content":" ACM输入输出模板 # 很多朋友在求职的笔试和面试中，因为对ACM模式的输入输出不熟悉，导致无法完成算法题。输入输出是写算法题的基础，大家可以根据自己的首选语言进行\u0026quot;背诵\u0026quot;。\n下面，针对常见的ACM输入与输出，给大家总结了模板写法，包括了C++、Python、Go、Java、JavaScript等主流编程语言。\n1.多组数据，每组第一行为n，之后输入n行两个整数 # 练习题：A+B问题II\n输入：第一行是一个整数N，表示后面会有N行a和b，通过空格隔开。\nC++ # #include\u0026lt;iostream\u0026gt; using namespace std; int main() { int n, a, b; while (cin \u0026gt;\u0026gt; n) { while (n--) { cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; cout \u0026lt;\u0026lt; a + b \u0026lt;\u0026lt; endl; } } } Python # n = int(input()) for _ in range(n): a, b = map(int, input().split()) print(a + b) Go # package main import \u0026#34;fmt\u0026#34; func main(){ var n, a, b int for { _, err := fmt.Scanf(\u0026#34;%d\u0026#34;, \u0026amp;n) if err != nil { break } for n \u0026gt; 0 { _, err := fmt.Scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;a, \u0026amp;b) if err != nil { break } fmt.Println(a + b) n -- } } } Java # import java.util.Scanner; public class Main { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); while (scanner.hasNext()) { int n = scanner.nextInt(); while (n -- \u0026gt; 0) { int a = scanner.nextInt(); int b = scanner.nextInt(); System.out.println(a + b); } } } } JavaScript # const readline = require(\u0026#39;readline\u0026#39;); const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); let n, count = 0; rl.on(\u0026#39;line\u0026#39;, (input) =\u0026gt; { if (!n) { n = +line; } else { const [a, b] = line.split(\u0026#39; \u0026#39;).map(Number); console.log(a + b)… if (++ count \u0026gt;= n) rl.close(); } }) 1.多行输入，每行两个整数 # 练习题：A+B问题I\n输入：包含一系列的a和b对，通过空格隔开。一对a和b占一行。\nC++ # #include\u0026lt;iostream\u0026gt; using namespace std; int main() { int a, b; while(cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b) cout \u0026lt;\u0026lt; a + b \u0026lt;\u0026lt; endl; } Python # while True: try: a, b = map(int, input().split()) print(a + b) except: break Go # package main import \u0026#34;fmt\u0026#34; func main(){ var a, b int for { _, err := fmt.Scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;a, \u0026amp;b) if err != nil { break } fmt.Println(a + b) } } Java # import java.util.Scanner; public class Main{ public static void main(String[] args){ Scanner in = new Scanner(System.in); while(in.hasNextInt()){ int a = in.nextInt(); int b = in.nextInt(); System.out.println( a + b ); } } } JavaScript # const readline = require(\u0026#39;readline\u0026#39;); const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); rl.on(\u0026#39;line\u0026#39;, (input) =\u0026gt; { const [a, b] = input.split(\u0026#39; \u0026#39;).map(Number); console.log(a + b); }) ","date":"2025-10-13","externalUrl":null,"permalink":"/posts/acm/io/","section":"文章","summary":"","title":"ACM输入输出模板","type":"posts"},{"content":"","date":"2025-10-13","externalUrl":null,"permalink":"/tags/%E9%9D%A2%E8%AF%95/","section":"Tags","summary":"","title":"面试","type":"tags"},{"content":"","date":"27 September 2025","externalUrl":null,"permalink":"/en/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"27 September 2025","externalUrl":null,"permalink":"/en/posts/","section":"Blog","summary":"","title":"Blog","type":"posts"},{"content":"","date":"27 September 2025","externalUrl":null,"permalink":"/en/tags/git/","section":"Tags","summary":"","title":"Git","type":"tags"},{"content":"","date":"27 September 2025","externalUrl":null,"permalink":"/en/series/git-documents/","section":"Series","summary":"","title":"Git Documents","type":"series"},{"content":"","date":"2025-09-27","externalUrl":null,"permalink":"/series/git%E6%95%99%E7%A8%8B/","section":"Series","summary":"","title":"Git教程","type":"series"},{"content":" When pushing projects to GitHub using the HTTPS method, you need to enter your username and password every time, which is very troublesome. However, by using the SSH method, this is no longer necessary. You only need to configure an SSH key in your GitHub account.\n1. Check if an SSH key already exists on your local machine # Press Win + R to open the Run dialog, type cmd to open the command line.\nEnter the following commands:\ncd .ssh dir If the files id_rsa and id_rsa.pub exist, it means you already have an SSH Key. The image below indicates they exist.\nIf they exist, proceed directly to step three.\n2. Generate an SSH key # If they do not exist, generate one using the following command.\nssh-keygen -t rsa -C \u0026#34;xxx@xxx.com\u0026#34; // Replace \u0026#34;xxx@xxx.com\u0026#34; with your own GitHub email address Press Enter for all prompts.\n3. Get the public key content (id_rsa.pub) # cd .ssh type id_rsa.pub // Windows command line cat id_rsa.pub // Linux command line As shown in the image below, copy this content.\n4. Add the public key to your GitHub account # Click your profile picture in the top right corner, go to Settings, and add SSH Keys. Paste the content you just copied. 5. Verify if the setup was successful # ssh -T git@github.com If successful, it will display something like this:\nOnce successfully set up, you can clone and push code without needing a username and password.\nNote: After this, when cloning repositories, use the SSH URL, not HTTPS!\n","date":"27 September 2025","externalUrl":null,"permalink":"/en/posts/git/gitssh/","section":"Blog","summary":"Config your SSH to connect Github","title":"How to config GitHub SSH","type":"posts"},{"content":"","date":"27 September 2025","externalUrl":null,"permalink":"/en/authors/muzimu/","section":"Authors","summary":"","title":"Muzimu","type":"authors"},{"content":"","date":"27 September 2025","externalUrl":null,"permalink":"/en/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"27 September 2025","externalUrl":null,"permalink":"/en/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":" ","date":"27 September 2025","externalUrl":null,"permalink":"/en/","section":"欢迎来到 Blowfish ！","summary":"","title":"欢迎来到 Blowfish ！","type":"page"},{"content":"","date":"2025-09-27","externalUrl":null,"permalink":"/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","section":"Tags","summary":"","title":"环境配置","type":"tags"},{"content":" Introduction # When using Git for code repository management, it\u0026rsquo;s inevitable that we need to submit commits. Each commit requires a message describing the changes made, helping collaborators quickly review and understand the development progress, thereby improving collaboration efficiency. Currently, the Angular convention is the most widely adopted Git commit message standard. This article references the following documents and provides a beginner-friendly. Angular GitHub Convention Reference Blog\nConvention Details # Commit Message Format # \u0026lt;type\u0026gt;(\u0026lt;scope\u0026gt;): \u0026lt;subject\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;body\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;footer\u0026gt; Among these, type and subject are mandatory, while scope is optional. The first line is the Header (title), the second part is the Body (description), and the last part is the Footer (notes). In practical development, it\u0026rsquo;s common to primarily follow the header convention, i.e., type(scope): subject. Examples are as follows:\nfeat(Extracurricular Activities): Display extracurricular activity credits fix(Extracurricular Activities): Fix issue with displaying extracurricular activity credits docs: Add environment setup tutorial for newcomers in README test: Unit tests for Academic System API Type # Commonly used Type values include:\nfeat: A new feature fix: A bug fix docs: Documentation changes style: Changes that do not affect code logic (e.g., formatting) refactor: Code refactoring that is neither a new feature nor a bug fix perf: Performance improvements test: Adding or modifying tests chore: Changes to the build process or auxiliary tools Scope # Specifies the module or file scope affected by the commit. For example:\nExtracurricular Activities Academic System Subject # It is recommended to use Chinese. Briefly describe the change using a statement, e.g., \u0026ldquo;Fixed the issue with\u0026hellip;\u0026rdquo;. Do not end the subject with a period or other punctuation. Tools for Standardizing Git Commits # VSCode users can install the git-commit-plugin extension. The usage effect is shown below: ","date":"24 September 2025","externalUrl":null,"permalink":"/en/posts/git/gitcommit/","section":"Blog","summary":"Introduction to Angular Git Commit Convention","title":"Git Commit Convention","type":"posts"},{"content":"","date":"2025-09-24","externalUrl":null,"permalink":"/tags/%E6%8A%80%E6%9C%AF%E8%A7%84%E8%8C%83/","section":"Tags","summary":"","title":"技术规范","type":"tags"},{"content":" My QQ # 2404580981\nMy Wechat # ","externalUrl":null,"permalink":"/en/users/","section":"欢迎来到 Blowfish ！","summary":"","title":"About me","type":"page"},{"content":"","externalUrl":null,"permalink":"/en/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"}]