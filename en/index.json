[{"content":"","date":"2025-10-24","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":" 安装命令 # # 安装zsh sudo apt install zsh # 下载oh my zsh git clone git@github.com:robbyrussell/oh-my-zsh.git ~/.oh-my-zsh # 复制oh my zsh配置 cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc # 设置默认终端为zsh chsh -s /bin/zsh # 打开zsh zsh # 下载补全插件 git clone git@github.com:zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions # 编辑配置文件，修改 plugins=(git zsh-autosuggestions) nano ~/.zshrc # 重启zsh source .zshrc 参考 oh-my-zsh安装\n","date":"2025-10-24","externalUrl":null,"permalink":"/posts/zsh/","section":"文章","summary":"","title":"oh-my-zsh安装","type":"posts"},{"content":" 本文为SIT2025新生赛Python版本题解，仅供参考，如有疑问可群里艾特\u0026quot;木子木\u0026quot; 本文标题均可点击链接跳转题目\n比赛链接\nA 欢迎来到SIT算法竞赛社 # _ = input() print(sum(list(map(int, input().split())))) B 寻找平衡日 # n = int(input()) nums = list(map(int, input().split())) total = sum(nums) prefix = [sum(nums[:i]) for i in range(len(nums) + 1)] for i in range(1, n + 1): left_sum = prefix[i - 1] right_sum = total - prefix[i] if left_sum == right_sum: print(i) exit(0) print(-1) C 编程友谊赛 # from collections import defaultdict from math import comb count = defaultdict(int) for _ in range(int(input())): s = input().strip() freq = \u0026#39;\u0026#39;.join(sorted(f\u0026#34;{c}:{s.count(c)}\u0026#34; for c in set(s))) count[freq] += 1 print(sum(comb(v, 2) for v in count.values())) D 队伍分配问题 # n = int(input()) nums = list(map(int, input().split())) print(\u0026#34;true\u0026#34; if len(set(nums)) == n else \u0026#34;false\u0026#34;) E 能做到吗 # x, y, n, t, k = map(int, input().split()) a = list(map(int, input().split())) b = list(map(int, input().split())) dp = [0] * (y + 1) for i in range(n): for j in range(y, a[i] - 1, -1): dp[j] = max(dp[j], dp[j - a[i]] + b[i]) if x + dp[y] // t \u0026gt;= k: print(\u0026#34;YES\u0026#34;) else: print(\u0026#34;NO\u0026#34;) F 社长选举 # 暴力解法(TLE)\nn = int(input()) nums = list(map(int, input().split())) max_cnt, best_k = -1, 0 for k in range(n): count = 0 for i in range(n): if nums[i] \u0026lt;= (i + k) % n: count += 1 if count \u0026gt; max_cnt: max_cnt, best_k = count ,k print(best_k) J 你的故事你来写 # print(\u0026#34;你的故事你来写\u0026#34;) ","date":"2025-10-20","externalUrl":null,"permalink":"/posts/acm/sit/contest2025/","section":"文章","summary":"","title":"SIT算法竞赛社2025年新生赛","type":"posts"},{"content":" 为什么选用Python写算法题 # 毋庸置疑，Python是主流编程语言中语法最简洁的，再加上python内置函数丰富，熟练之后写算法题可以大幅减少代码量和用时。\n面向ICPC/CCPC的同学出于性能考虑往往会采用C++作为首选编程语言，但是在普通比赛或者面试中碰到的编程题并不会卡编程语言的时间，只要算法的时间复杂度达标即可通过，所以当习惯使用Python写算法题后可以提高效率，并且能够体会到Python的简洁之道。\n常用技巧 # Counter # c = Counter(list) for k, v in c.items(): print(k, v) for k in c.keys(): print(k, c[k]) for v in c.values(): print(v) for i in c.elements(): print(i) dict = defaultdict(list) #默认为空列表 dict = defaultdict(int) #默认为0 for k, v in dict: print(k, v) 推导式 # # 列表推导式 newnames = [name.upeer() for name in names if len(name) \u0026gt; 3] multiples = [i for i in range(30) if 3 % 3 == 0] # 字典推导式 newdict = {key:len(key) for key in listdemo} dic = {x:x**2 for x in (2, 4, 6)} # 集合推导式 newset = {i**2 for i in (1, 2, 3)} a = {x for x in \u0026#39;abracadabra\u0026#39; if x not in \u0026#39;abc\u0026#39;} 自定义排序 # data = [(\u0026#39;red\u0026#39;, 5), (\u0026#39;blue\u0026#39;, 1), (\u0026#39;yellow\u0026#39;, 8), (\u0026#39;black\u0026#39;, 0)] data.sort(key=lambda r: r[1]) # 自定义排序函数 def custom_sort_key(item): # 根据item的某种特性生成排序键 return item[\u0026#39;priority\u0026#39;] # 假设我们按照优先级排序 # 示例数据 items = [ {\u0026#39;name\u0026#39;: \u0026#39;A\u0026#39;, \u0026#39;priority\u0026#39;: 2}, {\u0026#39;name\u0026#39;: \u0026#39;B\u0026#39;, \u0026#39;priority\u0026#39;: 1}, {\u0026#39;name\u0026#39;: \u0026#39;C\u0026#39;, \u0026#39;priority\u0026#39;: 3}, ] # 使用sorted()进行排序 sorted_items = sorted(items, key=custom_sort_key) print(sorted_items) # 输出排序后的列表 # 使用list.sort()进行排序 items.sort(key=custom_sort_key) print(items) # 输出就地排序后的列表 记忆化函数 # from functools import cache # 在函数前使用@cache即可完成记忆化函数 二分查找函数 # import bisect my_list = [1, 3, 5, 5, 7, 9] # 使用 bisect_left 查找目标元素的插入位置 left_index = bisect.bisect_left(my_list, 5) print(\u0026#34;插入位置（最左边）:\u0026#34;, left_index) # 使用 bisect_right 查找目标元素的插入位置 right_index = bisect.bisect_right(my_list, 5) print(\u0026#34;插入位置（最右边）:\u0026#34;, right_index) 插入位置（最左边）: 2 插入位置（最右边）: 4 # 详细使用： bisect.bisect_left(a, x, lo=0, hi=len(a), *, key=None) 在列表a的[lo,hi)子集块中查找第一个大于等于x的下标 bisect.bisect_right(a, x, lo=0, hi=len(a), *, key=None) 在列表a的[lo,hi)子集块中查找第一个大于x的下标 # 自定义比较规则 my_list = [1, 3, 5, 7, 9] index = bisect.bisect_left(my_list, 5, key=lambda x: x * x) # 应用示例 成绩分组 def grade(score, breakpoints=[60, 70, 80, 90], grades=\u0026#39;FDCBA\u0026#39;): i = bisect(breakpoints, score) return grades[i] [grade(score) for score in [33, 99, 77, 70, 89, 90, 100]] [\u0026#39;F\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;A\u0026#39;] 通用模板 # 此模版面向ICPC/CCPC竞赛，如果对于python代码有性能需求可以考虑使用模板中封装的IO模块\nimport sys, os, math from math import gcd, sqrt from bisect import bisect_left, bisect_right from io import BytesIO, IOBase from collections import Counter, defaultdict, deque from functools import lru_cache, reduce, cmp_to_key from itertools import accumulate, combinations, permutations, product from heapq import nsmallest, nlargest, heapify, heappop, heappush BUFSIZE = 8192 def solve(): n = 1 def main(): tt = 1 tt = II() for _ in range(tt): solve() def qmi(a, b, p): res = 1 % p while b: if b \u0026amp; 1: res = (res * a) % p a = a * a % p b \u0026gt;\u0026gt;= 1 return res def comb(n, r): return factorial(n) // (factorial(r) * factorial(n - r)) if n \u0026gt;= r else 0 def I(): return input() def II(): return int(input()) def MII(): return map(int, input().split()) def LMII(): return list(map(int, input().split())) def YES(t = 1): print(\u0026#34;YES\u0026#34; if t else \u0026#34;NO\u0026#34;) def NO(t = 1): YES(t ^ 1) def Yes(t = 1): print(\u0026#34;Yes\u0026#34; if t else \u0026#34;No\u0026#34;) def No(t = 1): Yes(t ^ 1) def yes(t = 1): print(\u0026#34;yes\u0026#34; if t else \u0026#34;no\u0026#34;) def no(t = 1): yes(t ^ 1) class FastIO(IOBase): newlines = 0 def __init__(self, file): self._fd = file.fileno() self.buffer = BytesIO() self.writable = \u0026#34;x\u0026#34; in file.mode or \u0026#34;r\u0026#34; not in file.mode self.write = self.buffer.write if self.writable else None def read(self): while True: b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE)) if not b: break ptr = self.buffer.tell() self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr) self.newlines = 0 return self.buffer.read() def readline(self): while self.newlines == 0: b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE)) self.newlines = b.count(b\u0026#34;\\n\u0026#34;) + (not b) ptr = self.buffer.tell() self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr) self.newlines -= 1 return self.buffer.readline() def flush(self): if self.writable: os.write(self._fd, self.buffer.getvalue()) self.buffer.truncate(0), self.buffer.seek(0) class IOWrapper(IOBase): def __init__(self, file): self.buffer = FastIO(file) self.flush = self.buffer.flush self.writable = self.buffer.writable self.write = lambda s: self.buffer.write(s.encode(\u0026#34;ascii\u0026#34;)) self.read = lambda: self.buffer.read().decode(\u0026#34;ascii\u0026#34;) self.readline = lambda: self.buffer.readline().decode(\u0026#34;ascii\u0026#34;) sys.stdin = IOWrapper(sys.stdin) input = lambda: sys.stdin.readline().rstrip() if __name__ == \u0026#34;__main__\u0026#34;: main() ","date":"2025-10-17","externalUrl":null,"permalink":"/posts/acm/python/","section":"文章","summary":"","title":"Python算法题常用技巧","type":"posts"},{"content":"","date":"2025-10-17","externalUrl":null,"permalink":"/tags/%E9%9D%A2%E8%AF%95/","section":"Tags","summary":"","title":"面试","type":"tags"},{"content":"","date":"13 October 2025","externalUrl":null,"permalink":"/en/tags/acm/","section":"Tags","summary":"","title":"ACM","type":"tags"},{"content":" ACM I/O Templates # Many people struggle to solve algorithm problems in job interviews and written tests due to unfamiliarity with ACM-style input and output. Input and output are the fundamentals of solving algorithm problems, and you can \u0026ldquo;memorize\u0026rdquo; the templates based on your preferred programming language.\nBelow is a summary of template implementations for common ACM input and output scenarios, covering mainstream programming languages such as C++, Python, Go, Java, and JavaScript. All sample codes are for the \u0026ldquo;A+B\u0026rdquo; problem, where the task is to read two numbers A and B and output their sum A+B.\n1. Multiple Data Groups: Each Group Starts with n Followed by n Lines of Two Integers # Practice Problem: A+B Problem I\nInput: The first line contains an integer N, indicating there will be N subsequent lines, each containing two integers a and b separated by a space.\nC++ # #include\u0026lt;iostream\u0026gt; using namespace std; int main() { int n, a, b; while (cin \u0026gt;\u0026gt; n) { while (n--) { cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; cout \u0026lt;\u0026lt; a + b \u0026lt;\u0026lt; endl; } } } Python # n = int(input()) for _ in range(n): a, b = map(int, input().split()) print(a + b) Go # package main import \u0026#34;fmt\u0026#34; func main(){ var n, a, b int for { _, err := fmt.Scanf(\u0026#34;%d\u0026#34;, \u0026amp;n) if err != nil { break } for n \u0026gt; 0 { _, err := fmt.Scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;a, \u0026amp;b) if err != nil { break } fmt.Println(a + b) n -- } } } Java # import java.util.Scanner; public class Main { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); while (scanner.hasNext()) { int n = scanner.nextInt(); while (n -- \u0026gt; 0) { int a = scanner.nextInt(); int b = scanner.nextInt(); System.out.println(a + b); } } } } JavaScript # const readline = require(\u0026#39;readline\u0026#39;); const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); let n, count = 0; rl.on(\u0026#39;line\u0026#39;, (input) =\u0026gt; { if (!n) { n = +input; // Fix: Original \u0026#34;line\u0026#34; is corrected to \u0026#34;input\u0026#34; for consistency } else { const [a, b] = input.split(\u0026#39; \u0026#39;).map(Number); console.log(a + b); // Fix: Incomplete code in original is completed if (++count \u0026gt;= n) rl.close(); } }) 2. Multiple Lines of Input: Each Line Contains Two Integers # Practice Problem: A+B Problem II\nInput: Contains a series of (a, b) pairs, each separated by a space. Each (a, b) pair occupies one line.\nC++ # #include\u0026lt;iostream\u0026gt; using namespace std; int main() { int a, b; while(cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b) cout \u0026lt;\u0026lt; a + b \u0026lt;\u0026lt; endl; } Python # while True: try: a, b = map(int, input().split()) print(a + b) except: break Go # package main import \u0026#34;fmt\u0026#34; func main(){ var a, b int for { _, err := fmt.Scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;a, \u0026amp;b) if err != nil { break } fmt.Println(a + b) } } Java # import java.util.Scanner; public class Main{ public static void main(String[] args){ Scanner in = new Scanner(System.in); while(in.hasNextInt()){ int a = in.nextInt(); int b = in.nextInt(); System.out.println(a + b); } } } JavaScript # const readline = require(\u0026#39;readline\u0026#39;); const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); rl.on(\u0026#39;line\u0026#39;, (input) =\u0026gt; { const [a, b] = input.split(\u0026#39; \u0026#39;).map(Number); console.log(a + b); }) ","date":"13 October 2025","externalUrl":null,"permalink":"/en/posts/acm/io/","section":"Blog","summary":"","title":"ACM IO Template","type":"posts"},{"content":"","date":"13 October 2025","externalUrl":null,"permalink":"/en/posts/","section":"Blog","summary":"","title":"Blog","type":"posts"},{"content":"","date":"13 October 2025","externalUrl":null,"permalink":"/en/tags/programing/","section":"Tags","summary":"","title":"Programing","type":"tags"},{"content":"","date":"13 October 2025","externalUrl":null,"permalink":"/en/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":" ","date":"13 October 2025","externalUrl":null,"permalink":"/en/","section":"欢迎来到 Blowfish ！","summary":"","title":"欢迎来到 Blowfish ！","type":"page"},{"content":"","date":"27 September 2025","externalUrl":null,"permalink":"/en/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"27 September 2025","externalUrl":null,"permalink":"/en/tags/git/","section":"Tags","summary":"","title":"Git","type":"tags"},{"content":"","date":"27 September 2025","externalUrl":null,"permalink":"/en/series/git-documents/","section":"Series","summary":"","title":"Git Documents","type":"series"},{"content":"","date":"2025-09-27","externalUrl":null,"permalink":"/series/git%E6%95%99%E7%A8%8B/","section":"Series","summary":"","title":"Git教程","type":"series"},{"content":" When pushing projects to GitHub using the HTTPS method, you need to enter your username and password every time, which is very troublesome. However, by using the SSH method, this is no longer necessary. You only need to configure an SSH key in your GitHub account.\n1. Check if an SSH key already exists on your local machine # Press Win + R to open the Run dialog, type cmd to open the command line.\nEnter the following commands:\ncd .ssh dir If the files id_rsa and id_rsa.pub exist, it means you already have an SSH Key. The image below indicates they exist.\nIf they exist, proceed directly to step three.\n2. Generate an SSH key # If they do not exist, generate one using the following command.\nssh-keygen -t rsa -C \u0026#34;xxx@xxx.com\u0026#34; // Replace \u0026#34;xxx@xxx.com\u0026#34; with your own GitHub email address Press Enter for all prompts.\n3. Get the public key content (id_rsa.pub) # cd .ssh type id_rsa.pub // Windows command line cat id_rsa.pub // Linux command line As shown in the image below, copy this content.\n4. Add the public key to your GitHub account # Click your profile picture in the top right corner, go to Settings, and add SSH Keys. Paste the content you just copied. 5. Verify if the setup was successful # ssh -T git@github.com If successful, it will display something like this:\nOnce successfully set up, you can clone and push code without needing a username and password.\nNote: After this, when cloning repositories, use the SSH URL, not HTTPS!\n","date":"27 September 2025","externalUrl":null,"permalink":"/en/posts/git/gitssh/","section":"Blog","summary":"Config your SSH to connect Github","title":"How to config GitHub SSH","type":"posts"},{"content":"","date":"27 September 2025","externalUrl":null,"permalink":"/en/authors/muzimu/","section":"Authors","summary":"","title":"Muzimu","type":"authors"},{"content":"","date":"27 September 2025","externalUrl":null,"permalink":"/en/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"2025-09-27","externalUrl":null,"permalink":"/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","section":"Tags","summary":"","title":"环境配置","type":"tags"},{"content":" Introduction # When using Git for code repository management, it\u0026rsquo;s inevitable that we need to submit commits. Each commit requires a message describing the changes made, helping collaborators quickly review and understand the development progress, thereby improving collaboration efficiency. Currently, the Angular convention is the most widely adopted Git commit message standard. This article references the following documents and provides a beginner-friendly. Angular GitHub Convention Reference Blog\nConvention Details # Commit Message Format # \u0026lt;type\u0026gt;(\u0026lt;scope\u0026gt;): \u0026lt;subject\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;body\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;footer\u0026gt; Among these, type and subject are mandatory, while scope is optional. The first line is the Header (title), the second part is the Body (description), and the last part is the Footer (notes). In practical development, it\u0026rsquo;s common to primarily follow the header convention, i.e., type(scope): subject. Examples are as follows:\nfeat(Extracurricular Activities): Display extracurricular activity credits fix(Extracurricular Activities): Fix issue with displaying extracurricular activity credits docs: Add environment setup tutorial for newcomers in README test: Unit tests for Academic System API Type # Commonly used Type values include:\nfeat: A new feature fix: A bug fix docs: Documentation changes style: Changes that do not affect code logic (e.g., formatting) refactor: Code refactoring that is neither a new feature nor a bug fix perf: Performance improvements test: Adding or modifying tests chore: Changes to the build process or auxiliary tools Scope # Specifies the module or file scope affected by the commit. For example:\nExtracurricular Activities Academic System Subject # It is recommended to use Chinese. Briefly describe the change using a statement, e.g., \u0026ldquo;Fixed the issue with\u0026hellip;\u0026rdquo;. Do not end the subject with a period or other punctuation. Tools for Standardizing Git Commits # VSCode users can install the git-commit-plugin extension. The usage effect is shown below: ","date":"24 September 2025","externalUrl":null,"permalink":"/en/posts/git/gitcommit/","section":"Blog","summary":"Introduction to Angular Git Commit Convention","title":"Git Commit Convention","type":"posts"},{"content":"","date":"2025-09-24","externalUrl":null,"permalink":"/tags/%E6%8A%80%E6%9C%AF%E8%A7%84%E8%8C%83/","section":"Tags","summary":"","title":"技术规范","type":"tags"},{"content":" My QQ # 2404580981\nMy Wechat # ","externalUrl":null,"permalink":"/en/users/","section":"欢迎来到 Blowfish ！","summary":"","title":"About me","type":"page"},{"content":"","externalUrl":null,"permalink":"/en/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"}]